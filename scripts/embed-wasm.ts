#!/usr/bin/env bun
/**
 * Embeds sql-wasm.wasm as a base64 string for standalone binary distribution.
 *
 * This solves the bundling issue where Bun's --compile doesn't include
 * external WASM files, causing ENOENT errors in distributed binaries.
 */

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Paths
const wasmSourcePath = path.join(__dirname, '..', 'node_modules', 'sql.js', 'dist', 'sql-wasm.wasm');
const outputPath = path.join(__dirname, '..', 'src', 'lib', 'embedded-wasm.ts');

console.log('Embedding sql-wasm.wasm as base64...');
console.log(`  Source: ${wasmSourcePath}`);
console.log(`  Output: ${outputPath}`);

// Read WASM file
if (!fs.existsSync(wasmSourcePath)) {
  console.error(`❌ WASM file not found: ${wasmSourcePath}`);
  console.error('   Run "bun install" first to ensure sql.js is installed.');
  process.exit(1);
}

const wasmBuffer = fs.readFileSync(wasmSourcePath);
const wasmBase64 = wasmBuffer.toString('base64');
const wasmSizeKB = (wasmBuffer.length / 1024).toFixed(2);

console.log(`  Size: ${wasmSizeKB} KB`);

// Generate TypeScript module
const tsContent = `/**
 * Embedded sql-wasm.wasm as base64 string
 *
 * Auto-generated by scripts/embed-wasm.ts
 * DO NOT EDIT THIS FILE MANUALLY
 *
 * Generated: ${new Date().toISOString()}
 * Source: node_modules/sql.js/dist/sql-wasm.wasm
 * Size: ${wasmSizeKB} KB
 */

export const EMBEDDED_WASM_BASE64 = '${wasmBase64}';
`;

// Write output
fs.writeFileSync(outputPath, tsContent, 'utf8');
console.log(`✓ Successfully embedded WASM (${wasmSizeKB} KB) in ${outputPath}`);
